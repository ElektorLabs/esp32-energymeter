esphome:
  name: esp32-energymeter
  friendly_name: esp32_energymeter

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "xxxx"

ota:
  password: "xxxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "xxx"
    password: "xxx"

captive_portal:

i2c:
  sda: GPIO8 
  scl: GPIO9 
  scan: True


spi:
  clk_pin: GPIO12
  miso_pin: GPIO13
  mosi_pin: GPIO11

sensor:
  - platform: atm90e32
    cs_pin: GPIO10
    phase_a:
      voltage:
        name: "Line Voltage A"
        id: VAC
      current:
        name: "CT1 Current"
        id: ct1Amps
      power:
        name: "Active Power CT1"
      reactive_power:
        name: "Reactive Power CT1"
      power_factor:
        name: "Power Factor CT1"
      gain_voltage: 59598
      gain_ct: 64596
    phase_b:
      voltage: 
        name: "Line Voltage B"
        id: VBC
      current:
        name: "CT2 Current"
        id: ct2Amps
      power:
        name: "Active Power CT2"
      reactive_power:
        name: "Reactive Power CT2"
      power_factor:
        name: "Power Factor CT2"
      gain_voltage: 59417 
      gain_ct: 60366
    phase_c:
      voltage: 
        name: "Line Voltage C"
        id: VCC
      current:
        name: " CT3 Current"
        id: ct3Amps
      power:
        name: "Active Power CT3"
      reactive_power:
        name: "Reactive Power CT3"
      power_factor:
        name: "Power Factor CT3"
      gain_voltage: 59365
      gain_ct: 61366
    frequency:
      name: "Line Frequency"
    chip_temperature:
      name: "Chip Temperature"
    line_frequency: 50Hz
    current_phases: 2
    gain_pga: 2X
    update_interval: 5s

#Watts per channel
  - platform: template
    name: CT1 Watts
    id: ct1Watts
    lambda: return id(ct1Amps).state * id(VAC).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: 5s
  - platform: template
    name: CT2 Watts
    id: ct2Watts
    lambda: return id(ct2Amps).state * id(VCC).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: 5s
  - platform: template
    name: CT3 Watts
    id: ct3Watts
    lambda: return id(ct3Amps).state * id(VCC).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: 5s
#Total Amps
  - platform: template
    name: Total Amps
    id: totalAmps
    lambda: return id(ct1Amps).state + id(ct2Amps).state + id(ct3Amps).state;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: 5s
#Total Watts
  - platform: template
    name: Total Watts
    id: totalWatts
    lambda: return id(totalAmps).state * id(VAC).state;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: 5s
#kWh
  - platform: total_daily_energy
    name: Total kWh
    power_id: totalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

time:
  - platform: sntp
    id: sntp_time
  

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: 16  # Change to your OLED's reset pin if needed
    address: 0x3C  # Typically 0x3C or 0x3D, check your device specifications
    rotation: 180

    lambda: |-
      it.strftime(0, 0, id(roboto_medium), TextAlign::TOP_LEFT, "%H:%M:%S", id(sntp_time).now());
      it.printf(0, 10, id(roboto_medium), TextAlign::TOP_LEFT, "Total kW: %.3f", id(totalWatts).state * 0.001);
      it.printf(0, 25, id(roboto_medium), TextAlign::TOP_LEFT, "CA: %.1f A", id(ct1Amps).state);
      it.printf(45, 25, id(roboto_medium), TextAlign::TOP_LEFT, "CB: %.1f A", id(ct2Amps).state);
      it.printf(90, 25, id(roboto_medium), TextAlign::TOP_LEFT, "CC: %.1f A", id(ct3Amps).state);
      it.printf(0, 40, id(roboto_medium), TextAlign::TOP_LEFT, "VA: %.1f V", id(VAC).state);
      it.printf(70, 40, id(roboto_medium), TextAlign::TOP_LEFT, "VB: %.1f V", id(VBC).state);
      it.printf(0, 50, id(roboto_medium), TextAlign::TOP_LEFT, "VC: %.1f V", id(VCC).state);

font:
  - file: "fonts/Roboto-Medium.ttf"
    id: roboto_medium
    size: 8